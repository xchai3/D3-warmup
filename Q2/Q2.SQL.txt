-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS sets;
DROP TABLE IF EXISTS themes;
DROP TABLE IF EXISTS parts;
DROP VIEW IF EXISTS top_level_themes;
DROP VIEW IF EXISTS sets_years;
DROP TABLE IF EXISTS parts_fts;


-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

create table sets
(
set_num text,
name text,
year int,
theme_id int,
num_parts int
);
create table themes(
id int,
name text,
parent_id int
);
create table parts(
part_num text,
name text,
part_cat_id int,
part_material_id int
);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.import data/sets.csv sets
.import data/themes.csv themes
.import data/parts.csv parts



-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
SELECT COUNT(*) FROM sets;
SELECT COUNT(*) FROM parts;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]
CREATE UNIQUE index sets_index 
on sets(set_num);
create unique index parts_index
on parts(part_num);
create unique index themes_index
on themes(id);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c.i) Create the top_level themes VIEW

-- [insert your SQL statement(s) BELOW this line]
create view top_level_themes as
select id,name 
from themes
where parent_id='';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(top_level_themes);
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c.ii) count the top level themes in the top_level_themes view.

-- [insert your SQL statement(s) BELOW this line]
select count(*)as count
from top_level_themes;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Finding top level themes with the most sets.

-- [insert your SQL statement(s) BELOW this line]
select top_level_themes.name as'theme',count(sets.theme_id)as "num_sets"
from top_level_themes
join sets on(top_level_themes.id=sets.theme_id)
group by sets.theme_id
order by count(sets.theme_id) desc
limit 10;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Calculate a percentage

-- [insert your SQL statement(s) BELOW this line]
select * from
(select t.name as theme, printf("%.2f", (100.00*count(s.theme_id)/(select count(s2.theme_id)
from sets as s2, top_level_themes as t2 where s2.theme_id=t2.id))) as percentage
from top_level_themes as t, sets as s
where t.id=s.theme_id
group by s.theme_id
order by count(s.theme_id) DESC
limit 10)
where percentage>'5.00';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Summarize a sub-theme

-- [insert your SQL statement(s) BELOW this line]
select name as 'sub_theme',count(parent_id) from themes
where(parent_id=186) order by count(parent_id),name;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g.i.) Create the sets VIEW

-- [insert your SQL statement(s) BELOW this line]
create view sets_years as
select year,count(*) as sets_count
from sets group by year;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(sets_years);
SELECT AVG(sets_count) FROM sets_years;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g.ii) Find the running total of sets in the Rebrickable database each year

-- [insert your SQL statement(s) BELOW this line]
select year,(select sum(sets_count) from sets_years where year<=S.year)as'running_total'
from sets_years as S;




-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Create the FTS table and import data.

-- [insert your SQL statement(s) BELOW this line]
CREATE VIRTUAL TABLE parts_fts USING fts3(part_num text ,name text,part_cat_id integer,part_material_id integer);
.mode csv
.import data/parts.csv parts_fts



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(parts_fts);
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.i) Count the number of unique parts whose name field begins with the prefix ‘mini’.

-- [insert your SQL statement(s) BELOW this line]
select count(name) as 'Count_overview' from parts_fts
where name like 'min%';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.ii) List the part_num’s of the unique parts that contain the terms ‘minidoll’ and ‘boy’ in the name field with no more than 5 intervening terms.

-- [insert your SQL statement(s) BELOW this line]
select part_num as "part_num_boy_minidoll"
from parts_fts
where name match 'minidoll NEAR/5 boy' ; 


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.iii) List the part_num’s of the unique parts that contain the terms ‘minidoll’ and ‘girl’ in the name field with no more than 5 intervening terms.

-- [insert your SQL statement(s) BELOW this line]
select part_num as "part_num_girl_minidoll"
from parts_fts
where name match 'minidoll NEAR/5 girl' ; 



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --